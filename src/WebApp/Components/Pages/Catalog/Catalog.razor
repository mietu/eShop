@page "/"
@inject NavigationManager Nav
@inject CatalogService CatalogService
@attribute [StreamRendering]

@*
    Catalog.razor - 主页目录组件
    显示所有产品的目录，支持分页和按品牌/类型筛选
*@

<PageTitle>AdventureWorks</PageTitle>
<SectionContent SectionName="page-header-title">准备好开始新的冒险了吗？</SectionContent>
<SectionContent SectionName="page-header-subtitle">以最新的服装和设备开始本季。</SectionContent>

<div class="catalog">
    @* 目录搜索组件，允许按品牌和类型筛选 *@
    <CatalogSearch BrandId="@BrandId" ItemTypeId="@ItemTypeId" />

    @if (catalogResult is null)
    {
        <p>加载中</p>
    }
    else
    {
        <div>
            @* 目录商品网格显示 *@
            <div class="catalog-items">
                @foreach (var item in catalogResult.Data)
                {
                    <CatalogListItem Item="@item" />
                }
            </div>

            @* 分页导航链接 *@
            <div class="page-links">
                @foreach (var pageIndex in GetVisiblePageIndexes(catalogResult))
                {
                    <NavLink ActiveClass="active-page" Match="@NavLinkMatch.All" href="@Nav.GetUriWithQueryParameter("page", pageIndex == 1 ? null : pageIndex)">@pageIndex</NavLink>
                }
            </div>
        </div>
    }
</div>

@code {
    /// <summary>
    /// 每页显示的商品数量
    /// </summary>
    const int PageSize = 9;

    /// <summary>
    /// 当前页码，从URL查询参数获取
    /// </summary>
    [SupplyParameterFromQuery]
    public int? Page { get; set; }

    /// <summary>
    /// 筛选的品牌ID，从URL查询参数"brand"获取
    /// </summary>
    [SupplyParameterFromQuery(Name = "brand")]
    public int? BrandId { get; set; }

    /// <summary>
    /// 筛选的商品类型ID，从URL查询参数"type"获取
    /// </summary>
    [SupplyParameterFromQuery(Name = "type")]
    public int? ItemTypeId { get; set; }

    /// <summary>
    /// 存储目录查询结果，包含商品列表和总数
    /// </summary>
    CatalogResult? catalogResult;

    /// <summary>
    /// 计算需要显示的页码序列
    /// </summary>
    /// <param name="result">目录查询结果</param>
    /// <returns>可见页码的序列</returns>
    static IEnumerable<int> GetVisiblePageIndexes(CatalogResult result)
        => Enumerable.Range(1, (int)Math.Ceiling(1.0 * result.Count / PageSize));

    /// <summary>
    /// 组件初始化时获取目录数据
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        // 调用服务获取目录商品，根据页码、页大小和筛选条件
        catalogResult = await CatalogService.GetCatalogItems(
            Page.GetValueOrDefault(1) - 1, // 页码从0开始，但URL中从1开始
            PageSize,
            BrandId,
            ItemTypeId);
    }
}
